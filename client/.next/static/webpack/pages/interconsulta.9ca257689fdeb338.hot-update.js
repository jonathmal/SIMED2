"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/interconsulta",{

/***/ "./src/services/interconsulta.service.js":
/*!***********************************************!*\
  !*** ./src/services/interconsulta.service.js ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   interconsultaService: () => (/* binding */ interconsultaService)\n/* harmony export */ });\n/* harmony import */ var _api_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.service */ \"./src/services/api.service.js\");\n\nconst interconsultaService = {\n    // Get all interconsultas (admin only)\n    getAllAdmin: async ()=>{\n        try {\n            console.log('Attempting to fetch admin interconsultas');\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get('/server/interconsultas/admin/todas');\n            console.log('Admin interconsultas response:', response);\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al obtener las interconsultas');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error in getAllAdmin:', error);\n            throw error;\n        }\n    },\n    // Get interconsultas for a specific service\n    getAllByService: async (servicioId)=>{\n        try {\n            console.log('Attempting to fetch service interconsultas for:', servicioId);\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get(\"/server/interconsultas/recibidas/\".concat(servicioId));\n            console.log('Service interconsultas response:', response);\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al obtener las interconsultas');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error in getAllByService:', error);\n            throw error;\n        }\n    },\n    // Get a single interconsulta by ID\n    getById: async (id)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get(\"/server/interconsultas/\".concat(id));\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al obtener la interconsulta');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error fetching interconsulta:', error);\n            throw error;\n        }\n    },\n    // Get interconsultas received by a service\n    getInterconsultasRecibidas: async (servicioId)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get(\"/server/interconsultas/recibidas/\".concat(servicioId));\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al obtener las interconsultas recibidas');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error fetching received interconsultas:', error);\n            throw error;\n        }\n    },\n    // Get interconsultas sent by a service\n    getInterconsultasEnviadas: async (servicioId)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get(\"/server/interconsultas/enviadas/\".concat(servicioId));\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al obtener las interconsultas enviadas');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error fetching sent interconsultas:', error);\n            throw error;\n        }\n    },\n    // Search interconsultas by patient history number\n    buscarPorHistoria: async (numeroHistoria)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get(\"/server/interconsultas/buscar/historia/\".concat(numeroHistoria));\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al buscar interconsultas por historia');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error searching interconsultas by history:', error);\n            throw error;\n        }\n    },\n    // Create a new interconsulta\n    crearInterconsulta: async (data)=>{\n        try {\n            console.log('Creating interconsulta with data:', data);\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.post('/server/interconsultas/crear', data);\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al crear la interconsulta');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error creating interconsulta:', error);\n            throw error;\n        }\n    },\n    // Add a note to an interconsulta\n    agregarNota: async (id, nota)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.post(\"/server/interconsultas/\".concat(id, \"/notas\"), {\n                nota\n            });\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al agregar la nota');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error adding note:', error);\n            throw error;\n        }\n    },\n    // Update interconsulta status\n    actualizarEstado: async (id, estado)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.put(\"/server/interconsultas/\".concat(id, \"/estado\"), {\n                estado\n            });\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al actualizar el estado');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error updating status:', error);\n            throw error;\n        }\n    },\n    // Mark notifications as read\n    marcarNotificacionesLeidas: async (id)=>{\n        try {\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.put(\"/server/interconsultas/\".concat(id, \"/notificaciones/leer\"));\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al marcar notificaciones como leÃ­das');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error marking notifications as read:', error);\n            throw error;\n        }\n    },\n    // Filter interconsultas\n    filtrarInterconsultas: async (filters)=>{\n        try {\n            const queryString = new URLSearchParams(filters).toString();\n            const response = await _api_service__WEBPACK_IMPORTED_MODULE_0__.apiService.get(\"/server/interconsultas/filtrar?\".concat(queryString));\n            if (!response.exito) {\n                throw new Error(response.error || 'Error al filtrar interconsultas');\n            }\n            return response;\n        } catch (error) {\n            console.error('Error filtering interconsultas:', error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/interconsulta.service.js\n"));

/***/ })

});